package eu.ace_design.island.map.processes

import eu.ace_design.island.map.{HasForSoil, HasForCondition, HasForBiome, IslandMap}
import eu.ace_design.island.map.resources.ExploitationDistribution
import eu.ace_design.island.stdlib.StandardExploitationDistribution

import scala.util.Random


case class AssignExploitationConditions(distribution: ExploitationDistribution = StandardExploitationDistribution)
  extends RandomizedProcess {

  override def apply(rand: Random)(m: IslandMap): IslandMap = {
    info("Assigning exploitation conditions to each face associated to a biome ")
    val biomes = m.faceProps.restrictedTo(HasForBiome())
    val resources = (biomes.keys map { i => i -> distribution.assign(biomes(i), rand) }).toMap

    info("Updating the map")
    val fProps = (m.faceProps /: resources) { case (acc, (ref, (soil, cond))) =>
      acc + (ref -> HasForCondition(cond)) + (ref -> HasForSoil(soil))
    }

    m.copy(faceProps = fProps)
  }
}
