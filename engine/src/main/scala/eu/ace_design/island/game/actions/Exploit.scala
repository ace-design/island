package eu.ace_design.island.game.actions

import eu.ace_design.island.game._
import eu.ace_design.island.map.resources.PrimaryResource

/**
 * This file is part of the Default (Template) Project project
 * @author mosser (26/10/2015, 17:36)
 **/
// { "action": "exploit", "parameters": { "resource": "..." } }
case class Exploit(resource: PrimaryResource) extends Action {

  override def computeCost(board: GameBoard, game: Game): Double = {
    val exploitationFactor = Game.exploitationCostModel(game.normalizeMen)
    (game.crew.landed * exploitationFactor * resource.difficulty) + Math.sqrt(game.distanceToBoat)
  }

  override def buildResult(board: GameBoard, game: Game): Result = {
    require(game.boat.isDefined, "Cannot explore without having landed before")
    val current = game.crew.location.get  // cannot be None as game.boat is not empty
    val tile = board.at(current._1, current._2)
    require(tile.stock.exists(s => s.resource == resource), "No resource [$resource] available on the current tile")
    val stock = tile.stock.find(s => s.resource == resource).get
    val alreadyExtracted = game.harvested(resource,current)
    val avail = stock.amount - alreadyExtracted
    val theoretical = game.crew.landed * Game.exploitationResourceModel(game.normalizeMen) * stock.extraction * avail
    val amount = Math.min(avail, theoretical.ceil.toInt)
    ExploitResult(amount = amount, r = resource)
  }

}
